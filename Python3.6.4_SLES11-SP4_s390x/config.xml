<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.heavy__job.HeavyJobProperty plugin="heavy-job@1.1">
      <weight>1</weight>
    </hudson.plugins.heavy__job.HeavyJobProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>dc2_sl11-SP4_4096</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.TimerTrigger>
      <spec>H 13 * * 6</spec>
    </hudson.triggers.TimerTrigger>
    <hudson.triggers.SCMTrigger>
      <spec>H 13 * * 6</spec>
      <ignorePostCommitHooks>false</ignorePostCommitHooks>
    </hudson.triggers.SCMTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>
 #Set the below parameters manually
package_name=&quot;python3&quot;
published_version=&quot;3.6.4&quot;

#Check distro and available version in repo : rhel7.x, Sles11.x/12.x, Ub16.x/17.x 
. /etc/os-release
if [ $ID == &quot;rhel&quot; ]; then
	available_version=$(sudo yum info $package_name | grep Version | head -1 | cut -d &apos;:&apos; -f 2| cut -d &apos; &apos; -f 2)
elif [ $ID == &quot;sles&quot; ]; then
	available_version=$(sudo zypper info $package_name | grep Version | head -1 | cut -d &apos;:&apos; -f 2| cut -d &apos; &apos; -f 2)
elif [ $ID == &quot;ubuntu&quot; ]; then
	available_version=$(sudo apt-get update &amp;&amp; sudo apt-cache policy $package_name | grep Candidate | head -1 | cut -d &apos; &apos; -f 4)
fi


if [[ $available_version == *&quot;$published_version&quot;* ]]; then
	echo &quot;Version $published_version is already available in repo&quot;
    echo &quot;Exact name: $available_version ... Failing&quot;
    exit 1
else	
   echo &quot;Published version is not available in repo. Going ahead.&quot;     
fi
#-----------------------------------------------------------------------------------------
sudo zypper update -y
sudo zypper install -y -C gcc gcc-c++ make libopenssl-devel openssl ncurses patch wget wget-openssl1 curl-openssl1 tar zlib-devel xz awk netcfg libtool automake autoconf


#Build openssl
cd $homedir
sudo rm -rf openssl
git clone git://github.com/openssl/openssl.git
cd openssl
git checkout OpenSSL_1_0_2l	 
./config --prefix=/usr --openssldir=/usr/local/openssl shared
make
sudo make install
openssl version


export PATH=/usr/local/bin:$PATH
#export LDFLAGS=&quot;-L/usr/local/lib/&quot;
#export LD_LIBRARY_PATH=&quot;/usr/local/lib/&quot;
#export CPPFLAGS=&quot;-I/usr/local/include -I/usr/local/include/openssl&quot;
cat /etc/services

#Build curl
cd $homedir
sudo rm -rf curl
git clone git://github.com/curl/curl.git
cd curl
git checkout curl-7_52_1
./buildconf 
./configure --prefix=/usr/local --with-ssl --disable-shared
make &amp;&amp; sudo make install


export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib64
export PATH=/usr/local/bin:$PATH

#Generate ca-bundle.crt for curl

echo insecure &gt;&gt; $HOME/.curlrc
wget --no-check-certificate https://raw.githubusercontent.com/curl/curl/curl-7_53_0/lib/mk-ca-bundle.pl
perl mk-ca-bundle.pl -k

export SSL_CERT_FILE=`pwd`/ca-bundle.crt
rm  $HOME/.curlrc

export LDFLAGS=&quot;-L/usr/local/lib/&quot;
export LD_LIBRARY_PATH=&quot;/usr/local/lib/&quot;
export CPPFLAGS=&quot;-I/usr/local/include -I/usr/local/include/openssl&quot;


wget https://www.python.org/ftp/python/3.6.4/Python-3.6.4.tar.xz
tar -xvf Python-3.6.4.tar.xz
cd Python-3.6.4
./configure --prefix=/usr/local --exec-prefix=/usr/local
make

make test
sudo make install

python_version=$(python3 --version 2&gt;&amp;1)

echo $python_version &gt; output.txt

echo &apos;Python 3.6.4&apos; &gt; expected.txt
result=`diff output.txt expected.txt`

if [ -z &quot;$result&quot; ] ; then
  exit 0
else
  exit 1
fi</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder plugin="groovy-postbuild@2.3.1">
      <script plugin="script-security@1.24">
        <script>import jenkins.model.Jenkins

def x=manager.envVars[&apos;NODE_NAME&apos;]
Jenkins.instance.slaves.each {
    if(it.name==x){
it.getComputer().doDoDelete()
    }
}</script>
        <sandbox>false</sandbox>
      </script>
      <behavior>0</behavior>
      <runForMatrixParent>false</runForMatrixParent>
    </org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder>
    <jenkins.plugins.slack.SlackNotifier plugin="slack@2.2">
      <baseUrl></baseUrl>
      <teamDomain></teamDomain>
      <authToken></authToken>
      <authTokenCredentialId></authTokenCredentialId>
      <botUser>false</botUser>
      <room>#loz-jenkins-build,@duaned</room>
      <startNotification>false</startNotification>
      <notifySuccess>false</notifySuccess>
      <notifyAborted>false</notifyAborted>
      <notifyNotBuilt>false</notifyNotBuilt>
      <notifyUnstable>false</notifyUnstable>
      <notifyRegression>false</notifyRegression>
      <notifyFailure>true</notifyFailure>
      <notifyBackToNormal>true</notifyBackToNormal>
      <notifyRepeatedFailure>true</notifyRepeatedFailure>
      <includeTestSummary>false</includeTestSummary>
      <includeFailedTests>false</includeFailedTests>
      <commitInfoChoice>NONE</commitInfoChoice>
      <includeCustomMessage>false</includeCustomMessage>
      <customMessage></customMessage>
    </jenkins.plugins.slack.SlackNotifier>
  </publishers>
  <buildWrappers/>
</project>
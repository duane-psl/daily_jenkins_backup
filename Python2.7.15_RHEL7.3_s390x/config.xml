<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Job exists on ecos0041. Can disable run here if needed.</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.heavy__job.HeavyJobProperty plugin="heavy-job@1.1">
      <weight>1</weight>
    </hudson.plugins.heavy__job.HeavyJobProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>dockercloud_rhel7.3</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.TimerTrigger>
      <spec>H 13 * * 4</spec>
    </hudson.triggers.TimerTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>source /home/test/.bashrc 
#Set the below parameters manually
package_name=&quot;python&quot;
published_version=&quot;2.7.15&quot;

#Check distro and available version in repo : rhel7.x, Sles11.x/12.x, Ub16.x/17.x 
. /etc/os-release
if [ $ID == &quot;rhel&quot; ]; then
	available_version=$(sudo yum info $package_name | grep Version | head -1 | cut -d &apos;:&apos; -f 2| cut -d &apos; &apos; -f 2)
elif [ $ID == &quot;sles&quot; ]; then
	available_version=$(sudo zypper info $package_name | grep Version | head -1 | cut -d &apos;:&apos; -f 2| cut -d &apos; &apos; -f 2)
elif [ $ID == &quot;ubuntu&quot; ]; then
	available_version=$(sudo apt-get update &amp;&amp; sudo apt-cache policy $package_name | grep Candidate | head -1 | cut -d &apos; &apos; -f 4)
fi


if [[ $available_version == *&quot;$published_version&quot;* ]]; then
	echo &quot;Version $published_version is already available in repo&quot;
    echo &quot;Exact name: $available_version ... Failing&quot;
    exit 1
else	
   echo &quot;Published version is not available in repo. Going ahead.&quot;     
fi

rm -rf ./*
#Install dependencies
sudo yum install -y gcc gcc-c++ make ncurses patch wget tar bzip2 bzip2-devel zlib-devel xz xz-devel readline-devel sqlite-devel tk-devel ncurses-devel gdbm-devel openssl-devel libdb-devel gdb
wget https://www.python.org/ftp/python/2.7.15/Python-2.7.15.tar.xz
tar -xvf Python-2.7.15.tar.xz
cd Python-2.7.15
#fix for test_ssl
cp Lib/test/test_ssl.py Lib/test/test_ssl.py.orig
cat &lt;&lt; &apos;EOF&apos; &gt; Lib/test/test_ssl.patch
--- Lib/test/test_ssl.py.orig	2018-08-20 13:08:52.340780063 -0400
+++ Lib/test/test_ssl.py	2018-08-20 13:08:52.400780063 -0400
@@ -989,6 +989,12 @@
 
 
     def test_load_dh_params(self):
+        filename = u&quot;dhparam.pem&quot;
+        fs_encoding = sys.getfilesystemencoding()
+        try:
+            filename.encode(fs_encoding)
+        except UnicodeEncodeError:
+            self.skipTest(&quot;filename %r cannot be encoded to the filesystem encoding %r&quot; % (filename, fs_encoding))
         ctx = ssl.SSLContext(ssl.PROTOCOL_TLSv1)
         ctx.load_dh_params(DHFILE)
         if os.name != &apos;nt&apos;:
EOF
cd Lib/test/
pwd
patch test_ssl.py &lt; test_ssl.patch
sed -i &quot;1010 s/u.*/filename)/&quot; test_ssl.py
diff -u test_ssl.py.orig test_ssl.py || true

cd ../../
./configure --prefix=/usr/local --exec-prefix=/usr/local
make
sudo make install
export PATH=&quot;/usr/local/bin:${PATH}&quot;

make test 2&gt;&amp;1 | tee testlog
grep &quot;test test.*failed&quot; testlog | cut -d&quot; &quot; -f2-2 | uniq &gt;failures
echo &quot;test_ssl &quot; &gt;expected
diff -u --ignore-all-space expected failures | tee diff_
if grep -q &apos;+test&apos; diff_; then
	exit 1
fi
./python Lib/test/regrtest.py -v test_ssl
    
python_version=$(python --version 2&gt;&amp;1)

echo $python_version &gt; output.txt

echo &apos;Python 2.7.15&apos; &gt; expected.txt
result=`diff output.txt expected.txt`

if [ -z &quot;$result&quot; ] ; then
  exit 0
else
  exit 1
fi
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder plugin="groovy-postbuild@2.3.1">
      <script plugin="script-security@1.24">
        <script>import jenkins.model.Jenkins

def x=manager.envVars[&apos;NODE_NAME&apos;]
Jenkins.instance.slaves.each {
if(it.name==x){
it.getComputer().doDoDelete()
}
}</script>
        <sandbox>false</sandbox>
      </script>
      <behavior>0</behavior>
      <runForMatrixParent>false</runForMatrixParent>
    </org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder>
    <jenkins.plugins.slack.SlackNotifier plugin="slack@2.2">
      <baseUrl></baseUrl>
      <teamDomain></teamDomain>
      <authToken></authToken>
      <authTokenCredentialId></authTokenCredentialId>
      <botUser>false</botUser>
      <room>#loz-jenkins-build,@duaned</room>
      <startNotification>false</startNotification>
      <notifySuccess>false</notifySuccess>
      <notifyAborted>false</notifyAborted>
      <notifyNotBuilt>false</notifyNotBuilt>
      <notifyUnstable>false</notifyUnstable>
      <notifyRegression>false</notifyRegression>
      <notifyFailure>true</notifyFailure>
      <notifyBackToNormal>true</notifyBackToNormal>
      <notifyRepeatedFailure>true</notifyRepeatedFailure>
      <includeTestSummary>false</includeTestSummary>
      <includeFailedTests>false</includeFailedTests>
      <commitInfoChoice>NONE</commitInfoChoice>
      <includeCustomMessage>false</includeCustomMessage>
      <customMessage></customMessage>
    </jenkins.plugins.slack.SlackNotifier>
  </publishers>
  <buildWrappers/>
</project>
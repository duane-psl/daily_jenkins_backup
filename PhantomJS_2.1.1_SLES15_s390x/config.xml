<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.heavy__job.HeavyJobProperty plugin="heavy-job@1.1">
      <weight>1</weight>
    </hudson.plugins.heavy__job.HeavyJobProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.0.1">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>git://github.com/ariya/phantomjs.git</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>2.1.1</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.RelativeTargetDirectory>
        <relativeTargetDir>phantomjs</relativeTargetDir>
      </hudson.plugins.git.extensions.impl.RelativeTargetDirectory>
    </extensions>
  </scm>
  <assignedNode>dockercloud_sles15</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.TimerTrigger>
      <spec>H 0 * * 1</spec>
    </hudson.triggers.TimerTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#Set the below parameters manually
package_name=&quot;phantomjs&quot;
published_version=&quot;2.1.1&quot;

#Check distro and available version in repo : rhel7.x, Sles15.x/12.x, Ub16.x/18.x 
. /etc/os-release
if [ $ID == &quot;rhel&quot; ]; then
	available_version=$(sudo yum info $package_name | grep Version | head -1 | cut -d &apos;:&apos; -f 2| cut -d &apos; &apos; -f 2)
elif [ $ID == &quot;sles&quot; ]; then
	available_version=$(sudo zypper info $package_name | grep Version | head -1 | cut -d &apos;:&apos; -f 2| cut -d &apos; &apos; -f 2)
elif [ $ID == &quot;ubuntu&quot; ]; then
	available_version=$(sudo apt-get update &amp;&amp; sudo apt-cache policy $package_name | grep Candidate | head -1 | cut -d &apos; &apos; -f 4)
fi


if [[ $available_version == *&quot;$published_version&quot;* ]]; then
	echo &quot;Version $published_version is already available in repo&quot;
    echo &quot;Exact name: $available_version ... Failing&quot;
    exit 1
else	
   echo &quot;Published version is not available in repo. Going ahead.&quot;     
fi


#Install  dependencies
sudo zypper update -y
sudo zypper install -y gcc gcc-c++ make flex bison gperf ruby freetype2-devel fontconfig-devel libicu-devel sqlite3-devel libpng16-compat-devel libjpeg8-devel python2 python2-setuptools git xorg-x11-devel xorg-x11-essentials xorg-x11-fonts xorg-x11 xorg-x11-util-devel libXfont-devel libXfont1 autoconf automake libtool
#sudo easy_install argparse

export WORK_DIR=`pwd`

cd $WORK_DIR
git clone git://github.com/openssl/openssl.git
cd openssl
git checkout OpenSSL_1_0_2l
./config --prefix=/usr --openssldir=/usr/local/openssl shared
make
sudo make install

cd $WORK_DIR
git clone git://github.com/curl/curl.git
cd curl
git checkout curl-7_52_1
./buildconf 
./configure --prefix=/usr/local --with-ssl --disable-shared
make &amp;&amp; sudo make install
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib64
export PATH=/usr/local/bin:$PATH


echo insecure &gt;&gt; $HOME/.curlrc
wget https://raw.githubusercontent.com/curl/curl/curl-7_53_0/lib/mk-ca-bundle.pl
perl mk-ca-bundle.pl -k
export SSL_CERT_FILE=`pwd`/ca-bundle.crt
rm $HOME/.curlrc

cd $WORK_DIR
git clone git://github.com/ariya/phantomjs.git
cd phantomjs
git checkout 2.1.1
git submodule init
git submodule update

cat &lt;&lt; &apos;EOF&apos; &gt; $WORK_DIR/phantomjs/src/qt/qtwebkit/Source/JavaScriptCore/API/JSStringRef.patch
@@ -27,6 +27,7 @@
 #define JSStringRef_h

 #include &lt;JavaScriptCore/JSValueRef.h&gt;
+#include &lt;uchar.h&gt;

 #ifndef __cplusplus
 #include &lt;stdbool.h&gt;
@@ -43,7 +44,7 @@
 @typedef JSChar
 @abstract A Unicode character.
 */
-    typedef unsigned short JSChar;
+    typedef char16_t JSChar;
 #else
    typedef wchar_t JSChar;
 #endif
EOF

cd $WORK_DIR/phantomjs/src/qt/qtwebkit/Source/JavaScriptCore/API/
patch JSStringRef.h &lt; JSStringRef.patch
git diff
cd $WORK_DIR/phantomjs/
python build.py


#Run the test-suite
cd $WORK_DIR/phantomjs/test

#increasing the timeout(optional step)
sed -i &apos;s/TIMEOUT    = 7/TIMEOUT    = 30/&apos; run-tests.py

python run-tests.py 2&gt;&amp;1 | tee testlogs &amp;&amp; tail -4 testlogs &gt; generated_failures

echo &quot;  203 passed
    4 passed unexpectedly
   12 failed as expected
    2 skipped&quot; &gt; expected_failures

diff -u  --ignore-all-space generated_failures expected_failures

#Check the version
cd $WORK_DIR
cd phantomjs
bin/phantomjs --version 
bin/phantomjs --version &gt;&gt; output.txt
echo &apos;2.1.1&apos; &gt; expected.txt
result=`diff output.txt expected.txt`
if [ -z &quot;$result&quot; ] ; then
	exit 0
else
	exit 1
fi 

</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder plugin="groovy-postbuild@2.3.1">
      <script plugin="script-security@1.24">
        <script>import jenkins.model.Jenkins

def x=manager.envVars[&apos;NODE_NAME&apos;]
Jenkins.instance.slaves.each {
    if(it.name==x){
it.getComputer().doDoDelete()
    }
}
</script>
        <sandbox>false</sandbox>
      </script>
      <behavior>0</behavior>
      <runForMatrixParent>false</runForMatrixParent>
    </org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder>
    <jenkins.plugins.slack.SlackNotifier plugin="slack@2.2">
      <baseUrl></baseUrl>
      <teamDomain></teamDomain>
      <authToken></authToken>
      <authTokenCredentialId></authTokenCredentialId>
      <botUser>false</botUser>
      <room>#loz-jenkins-build,@duaned</room>
      <startNotification>false</startNotification>
      <notifySuccess>false</notifySuccess>
      <notifyAborted>false</notifyAborted>
      <notifyNotBuilt>false</notifyNotBuilt>
      <notifyUnstable>false</notifyUnstable>
      <notifyRegression>false</notifyRegression>
      <notifyFailure>true</notifyFailure>
      <notifyBackToNormal>true</notifyBackToNormal>
      <notifyRepeatedFailure>true</notifyRepeatedFailure>
      <includeTestSummary>false</includeTestSummary>
      <includeFailedTests>false</includeFailedTests>
      <commitInfoChoice>NONE</commitInfoChoice>
      <includeCustomMessage>false</includeCustomMessage>
      <customMessage></customMessage>
    </jenkins.plugins.slack.SlackNotifier>
  </publishers>
  <buildWrappers/>
</project>
<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.heavy__job.HeavyJobProperty plugin="heavy-job@1.1">
      <weight>1</weight>
    </hudson.plugins.heavy__job.HeavyJobProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>dc2_rh7.4_4096</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.TimerTrigger>
      <spec>H 1 * * 3</spec>
    </hudson.triggers.TimerTrigger>
    <hudson.triggers.SCMTrigger>
      <spec>H 1 * * 3</spec>
      <ignorePostCommitHooks>false</ignorePostCommitHooks>
    </hudson.triggers.SCMTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>source /home/test/.bashrc
#Set the below parameters manually
package_name=&quot;alertmanager&quot;
published_version=&quot;0.14.0&quot;

#Check distro and available version in repo : rhel7.x, Sles11.x/12.x, Ub16.x/17.x 
. /etc/os-release
if [ $ID == &quot;rhel&quot; ]; then
	available_version=$(sudo yum info $package_name | grep Version | head -1 | cut -d &apos;:&apos; -f 2| cut -d &apos; &apos; -f 2)
elif [ $ID == &quot;sles&quot; ]; then
	available_version=$(sudo zypper info $package_name | grep Version | head -1 | cut -d &apos;:&apos; -f 2| cut -d &apos; &apos; -f 2)
elif [ $ID == &quot;ubuntu&quot; ]; then
	available_version=$(sudo apt-get update &amp;&amp; sudo apt-cache policy $package_name | grep Candidate | head -1 | cut -d &apos; &apos; -f 4)
fi


if [[ $available_version == *&quot;$published_version&quot;* ]]; then
	echo &quot;Version $published_version is already available in repo&quot;
    echo &quot;Exact name: $available_version ... Failing&quot;
    exit 1
else	
   echo &quot;Published version is not available in repo. Going ahead.&quot;     
fi
cat /etc/os-release
cat /etc/os*

sudo yum install -y git make curl glibc-static file
sudo yum install -y tar wget gcc

export GOPATH=`pwd`
cd $GOPATH
wget https://storage.googleapis.com/golang/go1.10.1.linux-s390x.tar.gz
chmod ugo+r go1.10.1.linux-s390x.tar.gz
sudo tar -C /usr/local -xzf go1.10.1.linux-s390x.tar.gz
export PATH=$PATH:/usr/local/go/bin
cd /usr/bin
sudo ln gcc s390x-linux-gnu-gcc
go version


mkdir -p $GOPATH/src/github.com/prometheus
cd $GOPATH/src/github.com/prometheus
git clone https://github.com/prometheus/alertmanager.git
cd alertmanager/
git checkout v0.14.0
make build

file $GOPATH/src/github.com/prometheus/alertmanager/alertmanager
file $GOPATH/src/github.com/prometheus/alertmanager/amtool
$GOPATH/src/github.com/prometheus/alertmanager/alertmanager --version
cd $GOPATH/src/github.com/prometheus/alertmanager
./alertmanager --config.file=doc/examples/simple.yml &amp;
sleep 20s
curl http://localhost:9093/
sleep 10s

cd $GOPATH/src/github.com/prometheus/alertmanager
make test 2&gt;&amp;1 | tee -a build_logs
cat build_logs | &apos;FAIL\s\github.com&apos; | awk &apos;{print $2}&apos; 2&gt;&amp;1 | tee test.txt
while IFS=&apos;&apos; read -r line || [[ -n &quot;$line&quot; ]]; do go test -v $line; done &lt; test.txt 2&gt;&amp;1 | tee individual_test_log
count=$(grep FAIL individual_test_log | wc -l)
while [ $count -gt 0 ]
do
   while IFS=&apos;&apos; read -r line || [[ -n &quot;$line&quot; ]]; do go test -v $line; done &lt; test.txt 2&gt;&amp;1 | tee individual_test_log
   count=$(grep FAIL individual_test_log | wc -l)
done


</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder plugin="groovy-postbuild@2.3.1">
      <script plugin="script-security@1.24">
        <script>import jenkins.model.Jenkins

def x=manager.envVars[&apos;NODE_NAME&apos;]
Jenkins.instance.slaves.each {
if(it.name==x){
it.getComputer().doDoDelete()
}
}</script>
        <sandbox>false</sandbox>
      </script>
      <behavior>0</behavior>
      <runForMatrixParent>false</runForMatrixParent>
    </org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder>
    <jenkins.plugins.slack.SlackNotifier plugin="slack@2.2">
      <baseUrl></baseUrl>
      <teamDomain></teamDomain>
      <authToken></authToken>
      <authTokenCredentialId></authTokenCredentialId>
      <botUser>false</botUser>
      <room>#loz-jenkins-build,@srajmane</room>
      <startNotification>false</startNotification>
      <notifySuccess>false</notifySuccess>
      <notifyAborted>false</notifyAborted>
      <notifyNotBuilt>false</notifyNotBuilt>
      <notifyUnstable>false</notifyUnstable>
      <notifyRegression>false</notifyRegression>
      <notifyFailure>true</notifyFailure>
      <notifyBackToNormal>true</notifyBackToNormal>
      <notifyRepeatedFailure>true</notifyRepeatedFailure>
      <includeTestSummary>false</includeTestSummary>
      <includeFailedTests>false</includeFailedTests>
      <commitInfoChoice>NONE</commitInfoChoice>
      <includeCustomMessage>false</includeCustomMessage>
      <customMessage></customMessage>
    </jenkins.plugins.slack.SlackNotifier>
  </publishers>
  <buildWrappers/>
</project>
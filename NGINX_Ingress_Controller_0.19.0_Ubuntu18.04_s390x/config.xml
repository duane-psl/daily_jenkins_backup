<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.heavy__job.HeavyJobProperty plugin="heavy-job@1.1">
      <weight>1</weight>
    </hudson.plugins.heavy__job.HeavyJobProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>dc2_ub18.04_4096</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.TimerTrigger>
      <spec>H 23 * * 4</spec>
    </hudson.triggers.TimerTrigger>
    <hudson.triggers.SCMTrigger>
      <spec>H 23 * * 4</spec>
      <ignorePostCommitHooks>false</ignorePostCommitHooks>
    </hudson.triggers.SCMTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>
#Set the below parameters manually
package_name=&quot;nginx-ingress-controller&quot;
published_version=&quot;0.19.0&quot;

#Check distro and available version in repo : rhel7.x, Sles11.x/12.x, Ub16.x/17.x 
. /etc/os-release
if [ $ID == &quot;rhel&quot; ]; then
	available_version=$(sudo yum info $package_name | grep Version | head -1 | cut -d &apos;:&apos; -f 2| cut -d &apos; &apos; -f 2)
elif [ $ID == &quot;sles&quot; ]; then
	available_version=$(sudo zypper info $package_name | grep Version | head -1 | cut -d &apos;:&apos; -f 2| cut -d &apos; &apos; -f 2)
elif [ $ID == &quot;ubuntu&quot; ]; then
	available_version=$(sudo apt-get update &amp;&amp; sudo apt-cache policy $package_name | grep Candidate | head -1 | cut -d &apos; &apos; -f 4)
fi


if [[ $available_version == *&quot;$published_version&quot;* ]]; then
	echo &quot;Version $published_version is already available in repo&quot;
    echo &quot;Exact name: $available_version ... Failing&quot;
    exit 1
else	
   echo &quot;Published version is not available in repo. Going ahead.&quot;     
fi


export WORK_DIR=$PWD
cat /etc/os-release
#Install dependency
sudo apt-get update
sudo apt-get install -y git make golang-1.10
export PATH=/usr/lib/go-1.10/bin:$PATH 
go version
cat /etc/os*


				#Docker installation
				sudo apt-get update
				cat /etc/os*
				sudo apt-get install -y apt-transport-https  ca-certificates  curl software-properties-common
				curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
				sudo add-apt-repository &quot;deb [arch=s390x] https://download.docker.com/linux/ubuntu artful stable&quot;
				sudo apt-get update
				sudo apt-get install -y docker-ce
				sudo service docker start
				sleep 20s
				sudo service docker status


#Build
			export GOPATH=$WORK_DIR
            export DOCKER=docker
            export COMPOSE_INTERACTIVE_NO_CLI=1
			mkdir -p $GOPATH/src/k8s.io/
			cd $GOPATH/src/k8s.io/
			git clone https://github.com/kubernetes/ingress-nginx.git
			cd ingress-nginx/
			git checkout nginx-0.19.0
			cd images/e2e/
			sed -i &apos;15d&apos; Dockerfile
			sed -i &quot;15i FROM quay.io/kubernetes-ingress-controller/nginx-s390x:0.61&quot; Dockerfile
			sed -i &apos;29d;30d&apos; Dockerfile
			sed -i &quot;29i ENV GO_ARCH        linux-s390x&quot; Dockerfile
			sed -i &quot;30i ENV GOLANG_SHA 	   c113495fbb175d6beb1b881750de1dd034c7ae8657c30b3de8808032c9af0a15&quot; Dockerfile
			git diff
            sudo service docker status
			sudo -E make docker-build
			
			cd $GOPATH/src/k8s.io/ingress-nginx/
			sed -i &apos;43d&apos; build/go-in-docker.sh
			sed -i &quot;43i IMAGE_TAG=$(sudo docker images | grep e2e | awk &apos;{print $2}&apos;)&quot; build/go-in-docker.sh
			sed -i &apos;44i E2E_IMAGE=quay.io/kubernetes-ingress-controller/e2e:$IMAGE_TAG&apos; build/go-in-docker.sh
			git diff
            go version
			sudo -E make build ARCH=s390x

#Test
			cd $GOPATH/src/k8s.io/ingress-nginx/
			sed -i &quot;s/ -race//g&quot; build/test.sh

			git diff

			cd $GOPATH/src/k8s.io/ingress-nginx/
			sudo -E make test ARCH=s390x









</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder plugin="groovy-postbuild@2.3.1">
      <script plugin="script-security@1.24">
        <script>import jenkins.model.Jenkins

def x=manager.envVars[&apos;NODE_NAME&apos;]
Jenkins.instance.slaves.each {
if(it.name==x){
it.getComputer().doDoDelete()
}
}</script>
        <sandbox>false</sandbox>
      </script>
      <behavior>0</behavior>
      <runForMatrixParent>false</runForMatrixParent>
    </org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder>
    <jenkins.plugins.slack.SlackNotifier plugin="slack@2.2">
      <baseUrl></baseUrl>
      <teamDomain></teamDomain>
      <authToken></authToken>
      <authTokenCredentialId></authTokenCredentialId>
      <botUser>false</botUser>
      <room>#loz-jenkins-build</room>
      <startNotification>false</startNotification>
      <notifySuccess>false</notifySuccess>
      <notifyAborted>false</notifyAborted>
      <notifyNotBuilt>false</notifyNotBuilt>
      <notifyUnstable>false</notifyUnstable>
      <notifyRegression>false</notifyRegression>
      <notifyFailure>true</notifyFailure>
      <notifyBackToNormal>true</notifyBackToNormal>
      <notifyRepeatedFailure>true</notifyRepeatedFailure>
      <includeTestSummary>false</includeTestSummary>
      <includeFailedTests>false</includeFailedTests>
      <commitInfoChoice>NONE</commitInfoChoice>
      <includeCustomMessage>false</includeCustomMessage>
      <customMessage></customMessage>
    </jenkins.plugins.slack.SlackNotifier>
  </publishers>
  <buildWrappers/>
</project>